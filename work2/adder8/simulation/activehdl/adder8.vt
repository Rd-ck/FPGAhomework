// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/05/2022 15:17:14"
                                                                                
// Verilog Test Bench template for design : adder8
// 
// Simulation tool : Active-HDL (Verilog)
// 

`timescale 1 ns/ 1 ps
module adder8_vlg_tst();
// constants                                           
// general purpose registers
parameter PERIOD = 100;
// test vector input registers
reg [7:0] a;
reg [7:0] b;
reg cin;
// wires                                               
wire co;
wire [7:0]  sum;

// assign statements (if any)                          
adder8 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cin(cin),
	.co(co),
	.sum(sum)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin  
	#PERIOD	a = 8'b0000_0000; b = 8'b0000_0000; cin = 1'b0;  //0 + 0 + 0= 0
	#PERIOD a = 8'b0000_0001; b = 8'b0000_0001;  //1 + 1 + 1 = 3
	#PERIOD a = 8'b0010_0000; b = 8'b0010_0011;  //32 + 35 + 1 = 68
	#PERIOD a = 8'b1111_1100; b = 8'b0000_0011;  //252 + 3 + 0 = 255
	#PERIOD a = 8'b1111_1100; b = 8'b0000_0011;  //252 + 3 + 1 = 256
	#PERIOD a = 8'b1111_1100; b = 8'b0000_1000;  //252 + 8 + 0 = 260 (му│Ш)
	#(2*PERIOD) $stop;                                           
$display("Running testbench");                       
end  
always begin
	#(PERIOD/2) cin = ~cin;
end
endmodule

